// ** C1Glob Class ** //
// Autogenerated in main_create_cmds.cpp from cmds_format.json ** //
// Manzano Software //

#ifndef _MZN_CMD_C1_GLOB_H
#define _MZN_CMD_C1_GLOB_H

#include "command.h"

namespace mzn {

// -------------------------------------------------------------------------- //
class C1Glob : public Command {

friend std::ostream & operator<<(std::ostream & cmd_os, C1Glob const & cmd);

public:

    explicit C1Glob();
    ~C1Glob() = default;

    C1Glob(C1Glob && rhs) = default;
    C1Glob & operator=(C1Glob && rhs) = default;
    C1Glob(C1Glob const & rhs) = default;
    C1Glob & operator=(C1Glob const & rhs) = default;
    std::string const cmd_name = "c1_glob";

    CmdFieldDuration<uint16_t> clock_timeout;
    BmInitialVco initial_vco;
    CmdField<bool, 2> gps_backup_power;
    BmAuxStatusWebFlags aux_status_web_flags;
    BmGainPreAmp gain_pre_amp;
    BmLinearPhaseFilters linear_phase_filters;
    BmInputBitmap input_bitmap;
    CmdField<int16_t> web_server_tcp_port;
    CmdFieldDuration<uint16_t> server_timeout;
    CmdFieldDuration<uint16_t, std::micro> drift_tolerance;
    CmdField<uint16_t> jump_filter;
    CmdFieldDuration<uint16_t, std::micro> jump_threshold;
    CmdField<uint16_t> calibrator_offset;
    BmSensorControlEnable sensor_control_enable;
    CmdFieldDuration<int16_t> sampling_phase;
    CmdFieldDuration<uint16_t> gps_cold_start_seconds;
    CmdField<uint32_t> kmi_user_tag;
    CmdField<uint16_t> channel_1_freq_bit_0_scale;
    CmdField<uint16_t> channel_1_freq_bit_1_scale;
    CmdField<uint16_t> channel_1_freq_bit_2_scale;
    CmdField<uint16_t> channel_1_freq_bit_3_scale;
    CmdField<uint16_t> channel_1_freq_bit_4_scale;
    CmdField<uint16_t> channel_1_freq_bit_5_scale;
    CmdField<uint16_t> channel_1_freq_bit_6_scale;
    CmdField<uint16_t> channel_1_freq_bit_7_scale;
    CmdField<uint16_t> channel_2_freq_bit_0_scale;
    CmdField<uint16_t> channel_2_freq_bit_1_scale;
    CmdField<uint16_t> channel_2_freq_bit_2_scale;
    CmdField<uint16_t> channel_2_freq_bit_3_scale;
    CmdField<uint16_t> channel_2_freq_bit_4_scale;
    CmdField<uint16_t> channel_2_freq_bit_5_scale;
    CmdField<uint16_t> channel_2_freq_bit_6_scale;
    CmdField<uint16_t> channel_2_freq_bit_7_scale;
    CmdField<uint16_t> channel_3_freq_bit_0_scale;
    CmdField<uint16_t> channel_3_freq_bit_1_scale;
    CmdField<uint16_t> channel_3_freq_bit_2_scale;
    CmdField<uint16_t> channel_3_freq_bit_3_scale;
    CmdField<uint16_t> channel_3_freq_bit_4_scale;
    CmdField<uint16_t> channel_3_freq_bit_5_scale;
    CmdField<uint16_t> channel_3_freq_bit_6_scale;
    CmdField<uint16_t> channel_3_freq_bit_7_scale;
    CmdField<uint16_t> channel_4_freq_bit_0_scale;
    CmdField<uint16_t> channel_4_freq_bit_1_scale;
    CmdField<uint16_t> channel_4_freq_bit_2_scale;
    CmdField<uint16_t> channel_4_freq_bit_3_scale;
    CmdField<uint16_t> channel_4_freq_bit_4_scale;
    CmdField<uint16_t> channel_4_freq_bit_5_scale;
    CmdField<uint16_t> channel_4_freq_bit_6_scale;
    CmdField<uint16_t> channel_4_freq_bit_7_scale;
    CmdField<uint16_t> channel_5_freq_bit_0_scale;
    CmdField<uint16_t> channel_5_freq_bit_1_scale;
    CmdField<uint16_t> channel_5_freq_bit_2_scale;
    CmdField<uint16_t> channel_5_freq_bit_3_scale;
    CmdField<uint16_t> channel_5_freq_bit_4_scale;
    CmdField<uint16_t> channel_5_freq_bit_5_scale;
    CmdField<uint16_t> channel_5_freq_bit_6_scale;
    CmdField<uint16_t> channel_5_freq_bit_7_scale;
    CmdField<uint16_t> channel_6_freq_bit_0_scale;
    CmdField<uint16_t> channel_6_freq_bit_1_scale;
    CmdField<uint16_t> channel_6_freq_bit_2_scale;
    CmdField<uint16_t> channel_6_freq_bit_3_scale;
    CmdField<uint16_t> channel_6_freq_bit_4_scale;
    CmdField<uint16_t> channel_6_freq_bit_5_scale;
    CmdField<uint16_t> channel_6_freq_bit_6_scale;
    CmdField<uint16_t> channel_6_freq_bit_7_scale;
    CmdField<int16_t> channel_1_offset;
    CmdField<int16_t> channel_2_offset;
    CmdField<int16_t> channel_3_offset;
    CmdField<int16_t> channel_4_offset;
    CmdField<int16_t> channel_5_offset;
    CmdField<int16_t> channel_6_offset;
    CmdField<int16_t> channel_1_gain;
    CmdField<int16_t> channel_2_gain;
    CmdField<int16_t> channel_3_gain;
    CmdField<int16_t> channel_4_gain;
    CmdField<int16_t> channel_5_gain;
    CmdField<int16_t> channel_6_gain;
    CmdFieldIgnore<uint32_t> ignore;

    uint16_t msg_to_data(std::vector<uint8_t> const & msg,
                         uint16_t mf_begin) override;

    uint16_t data_to_msg(std::vector<uint8_t> & msg,
                         uint16_t mf_begin) const override;

private:

    std::ostream & os_print(std::ostream & cmd_os) const override;
};


inline std::ostream & operator<<(std::ostream & cmd_os, C1Glob const & cmd) {
    return cmd.os_print(cmd_os);
}

} // end namespace
#endif // _MZN_CMD_C1_GLOB_H
