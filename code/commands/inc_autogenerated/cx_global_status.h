// ** CxGlobalStatus Class ** //
// Autogenerated in main_create_cmds.cpp from cmds_format.json ** //
// Manzano Software //

#ifndef _MZN_CMD_CX_GLOBAL_STATUS_H
#define _MZN_CMD_CX_GLOBAL_STATUS_H

#include "command.h"

namespace mzn {

// -------------------------------------------------------------------------- //
class CxGlobalStatus : public Command {

friend std::ostream & operator<<(std::ostream & cmd_os, CxGlobalStatus const & cmd);

public:

    explicit CxGlobalStatus();
    ~CxGlobalStatus() = default;

    CxGlobalStatus(CxGlobalStatus && rhs) = default;
    CxGlobalStatus & operator=(CxGlobalStatus && rhs) = default;
    CxGlobalStatus(CxGlobalStatus const & rhs) = default;
    CxGlobalStatus & operator=(CxGlobalStatus const & rhs) = default;
    std::string const cmd_name = "cx_global_status";

    CmdField<uint16_t> acquisition_control;
    BmStatClockQuality clock_quality;
    CmdFieldDuration<uint16_t, std::ratio<60> > minutes_since_loss;
    CmdField<int16_t> analog_voltage_control_valve;
    CmdFieldDuration<int32_t> seconds_offset;
    CmdFieldDuration<int32_t, std::micro> usec_offset;
    CmdFieldDuration<int32_t> total_time_in_seconds;
    CmdFieldDuration<int32_t> power_on_time_in_seconds;
    CmdFieldTime<uint32_t, Time::k_shift_seconds_1970_2000> time_of_last_re_sync;
    CmdField<uint32_t> total_number_of_re_syncs;
    CmdField<int16_t> gps_status;
    BmStatCalibratorStatus calibrator_status;
    BmSensorControlEnable sensor_control_enable;
    CmdField<int16_t> current_vco;
    CmdField<uint16_t> data_sequence_number;
    BmPllState pll_running;
    CmdField<uint16_t> status_inputs;
    BmMiscInputs misc_inputs;
    CmdField<uint32_t> current_data_sequence_number;

    uint16_t msg_to_data(std::vector<uint8_t> const & msg,
                         uint16_t mf_begin) override;

    uint16_t data_to_msg(std::vector<uint8_t> & msg,
                         uint16_t mf_begin) const override;

private:

    std::ostream & os_print(std::ostream & cmd_os) const override;
};


inline std::ostream & operator<<(std::ostream & cmd_os, CxGlobalStatus const & cmd) {
    return cmd.os_print(cmd_os);
}

} // end namespace
#endif // _MZN_CMD_CX_GLOBAL_STATUS_H
