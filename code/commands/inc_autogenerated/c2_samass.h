// ** C2Samass Class ** //
// Autogenerated in main_create_cmds.cpp from cmds_format.json ** //
// Manzano Software //

#ifndef _MZN_CMD_C2_SAMASS_H
#define _MZN_CMD_C2_SAMASS_H

#include "command.h"

namespace mzn {

// -------------------------------------------------------------------------- //
class C2Samass : public Command {

friend std::ostream & operator<<(std::ostream & cmd_os, C2Samass const & cmd);

public:

    explicit C2Samass();
    ~C2Samass() = default;

    C2Samass(C2Samass && rhs) = default;
    C2Samass & operator=(C2Samass && rhs) = default;
    C2Samass(C2Samass const & rhs) = default;
    C2Samass & operator=(C2Samass const & rhs) = default;
    std::string const cmd_name = "c2_samass";

    CmdField<uint16_t> tolerance_1a;
    CmdField<uint16_t> tolerance_1b;
    CmdField<uint16_t> tolerance_1c;
    CmdField<uint16_t> maximum_tries_1;
    CmdFieldDuration<uint16_t, std::ratio<60> > normal_interval_1;
    CmdFieldDuration<uint16_t, std::ratio<60> > squelch_interval_1;
    BmSensorControlEnable sensor_control_enable_1;
    CmdFieldDuration<uint16_t, std::centi> pulse_duration_1;
    CmdField<uint16_t> tolerance_2a;
    CmdField<uint16_t> tolerance_2b;
    CmdField<uint16_t> tolerance_2c;
    CmdField<uint16_t> maximum_tries_2;
    CmdFieldDuration<uint16_t, std::ratio<60> > normal_interval_2;
    CmdFieldDuration<uint16_t, std::ratio<60> > squelch_interval_2;
    BmSensorControlEnable sensor_control_enable_2;
    CmdFieldDuration<uint16_t, std::centi> pulse_duration_2;

    uint16_t msg_to_data(std::vector<uint8_t> const & msg,
                         uint16_t mf_begin) override;

    uint16_t data_to_msg(std::vector<uint8_t> & msg,
                         uint16_t mf_begin) const override;

private:

    std::ostream & os_print(std::ostream & cmd_os) const override;
};


inline std::ostream & operator<<(std::ostream & cmd_os, C2Samass const & cmd) {
    return cmd.os_print(cmd_os);
}

} // end namespace
#endif // _MZN_CMD_C2_SAMASS_H
